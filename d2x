#!/bin/bash
#{
# d2x - directory2x (html etc)
#
# Usage:
#}
PATH=$PATH:./theme
declare -A LISTENERS
args="$*"

grep_inbetween(){
  cat | awk "/$1/,/$2/"
}

pump(){
	printf "."
}

_init(){
	reqs="cat sed find xargs test which grep ls"
	[[ ! -d theme ]] && reqs="$reqs wget unzip"
	for i in $reqs; do which $i &>/dev/null || { echo "error: please somehow install $i"; exit 1; }; done
	[[ ${#args} == 0 ]] && usage 
	init_eventlistener
	for i in $(find theme/plugins -maxdepth 1 -type f); do source "$i"; done
}

usage(){
	cat "$0" | grep_inbetween '^#{' '^#}' | sed 's/[#{}]//g' 
	cat "$0" | grep_inbetween '^##' '$'   | sed 's/#//g'| xargs printf "   %s\n"
	echo -e "\n\n"
	exit 0
}

init_eventlistener(){ # eventhandler: https://gist.github.com/coderofsalvation/8268365
  event(){
	E=$1; shift; [[ "$E" == "DEBUG" ]] && E="${BASH_COMMAND// */}"
	for listener in "${LISTENERS[$E]}"; do 
		[[ "${#listener}" == 0 ]] && continue;
		eval "$listener $@ ${BASH_COMMAND}"; 
	done
  }

  on(){
	if ! test "${LISTENERS['$1']+isset}"; then LISTENERS["$1"]=""; fi
	LISTENERS["$1"]+="$2 " # luckily functionnames never contain spaces
  }
  # redirect traps to events
  for i in EXIT SIGINT SIGTERM DEBUG; do trap "event $i" $i; done
}

render(){
	cat "$1" | sed 's/"/\\\"/g;s/.*/echo "&"/e' 
}

renderpages(){
	indir="$1"
	outdir="$2"
	root="$3"
	find "$indir" -maxdepth 1 | sort -g | grep -v '^'"$1"'$' | while read file; do 
		if [[ -d "$file"  ]]; then 
			[[ ! -z "$(ls -A "$file")"   ]] && renderpages "$file" "$outdir" "$root"
			continue;
		fi
		dir="$(dirname "${file/$root/$outdir}")"
		outfile="${file/$root/$outdir}"
		pump
		[[ ! -d "$dir" ]] && mkdir -p "$dir"
		[[ -f "theme/plugins/filetype/${file/*\./}" ]] && {
			source "theme/plugins/filetype/${file/*\./}" 
		} > "$outfile"
	done;
	return 0
}

serve(){
	cd "$1"
	echo "[x] starting server at port 8000"
	which python2 &>/dev/null && { python2 -m SimpleHTTPServer; exit; }
	which python3 &>/dev/null && { python3 -m http.server     ; exit; }
	which php     &>/dev/null && { php -S localhost:8000      ; exit; }
	which node    &>/dev/null && {
		which http-server &>/dev/null || npm install http-server
		http-server -c-1 -p 8000 .	
	}
}

## init 
init(){
	if [[ ! -d theme ]]; then 
		[[ -d src ]] && { echo "error: please backup and delete the src-folder to proceed"; exit 1; }
		wget "https://github.com/coderofsalvation/d2x/raw/master/themes/default.zip"
		unzip default.zip 1>/dev/null
		rm default.zip
	fi
}

## generate <dir> <outdir> [--server] 
generate(){
	_init
	printf "[x] rendering $1 => $2"
	renderpages "$1" "$2" "$1"
	echo "[x] done"
	[[ $3 == "--server" ]] && serve "$2"
	exit 0
}

if [[ -d "$1" ]]; then
	[[ -n $2 ]] && [[ ! -d "$2" ]] && mkdir -p "$2"
	_init "$1"
	generate "$@"
else
	[[ ! -n $1 ]] && usage
	"$@" 
fi
